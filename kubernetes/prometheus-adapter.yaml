apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-adapter-server-resources
  labels:
    app: prometheus
    component: rbac
rules:
  - apiGroups:
      - custom.metrics.k8s.io
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-adapter-resource-reader
  labels:
    app: prometheus
    component: rbac
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - services
      - configmaps
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter:system:auth-delegator
  labels:
    app: prometheus
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter-resource-reader
  labels:
    app: prometheus
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter-resource-reader
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter-hpa-controller
  labels:
    app: prometheus
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter-server-resources
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: prometheus
  name: adapter-auth-reader
  labels:
    app: prometheus
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: prometheus
  name: adapter
  labels:
    app: prometheus
    component: adapter
data:
  config.yaml: |
    rules:

      - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
        seriesFilters: []
        resources:
          overrides:
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        name:
          matches: ^container_(.*)_seconds_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[5m])) by (<<.GroupBy>>)

      - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
        seriesFilters:
          - isNot: ^container_.*_seconds_total$
        resources:
          overrides:
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        name:
          matches: ^container_(.*)_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[5m])) by (<<.GroupBy>>)

      - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
        seriesFilters:
          - isNot: ^container_.*_total$
        resources:
          overrides:
            namespace:
              resource: namespace
            pod_name:
              resource: pod
        name:
          matches: ^container_(.*)$
          as: ""
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}) by (<<.GroupBy>>)

      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters:
          - isNot: .*_total$
        resources:
          template: <<.Resource>>
        name:
          matches: ""
          as: ""
        metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)

      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters:
          - isNot: .*_seconds_total
        resources:
          template: <<.Resource>>
        name:
          matches: ^(.*)_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)

      - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
        seriesFilters: []
        resources:
          template: <<.Resource>>
        name:
          matches: ^(.*)_seconds_total$
          as: ""
        metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)
---
apiVersion: v1
kind: Service
metadata:
  namespace: prometheus
  name: adapter
  labels:
    app: prometheus
    component: adapter
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: prometheus
    component: adapter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prometheus
  name: adapter
  labels:
    app: prometheus
    component: adapter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: adapter
  template:
    metadata:
      labels:
        app: prometheus
        component: adapter
    spec:
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["all"]
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccountName: prometheus
      containers:
        - name: adapter
          image: directxman12/k8s-prometheus-adapter-amd64:v0.4.1
          args:
            - /adapter
            - --secure-port=6443
            - --cert-dir=/tmp/cert
            - --logtostderr=true
            - --prometheus-url=http://server.prometheus.svc:9090
            - --metrics-relist-interval=1m
            - --v=4
            - --config=/etc/adapter/config.yaml
          ports:
            - containerPort: 6443
              name: https
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: https
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: https
            initialDelaySeconds: 30
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /etc/adapter/
              name: config
              readOnly: true
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: config
          configMap:
            name: adapter
        - name: tmp
          emptyDir: {}
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  namespace: prometheus
  name: v1beta1.custom.metrics.k8s.io
  labels:
    app: prometheus
    component: apiservice
spec:
  service:
    namespace: prometheus
    name: adapter
  group: custom.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
