apiVersion: v1
kind: Namespace
metadata:
  name: grafana
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: grafana
  name: grafana
  labels:
    app: grafana
    component: rbac
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-clusterrole
  labels:
    app: grafana
    component: rbac
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "watch", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-clusterrolebinding
  labels:
    app: grafana
    component: rbac
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: grafana
roleRef:
  kind: ClusterRole
  name: grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
kind: Secret
apiVersion: v1
metadata:
  namespace: grafana
  name: credentials
  labels:
    app: grafana
    component: config
type: Opaque
data:
  admin-password: ${GRAFANA_ADMIN_PASSWORD_BASE64}
  db-root-password: ${GRAFANA_DB_ROOT_PASSWORD_BASE64}
  db-user-password: ${GRAFANA_DB_USER_PASSWORD_BASE64}
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: grafana
  name: grafana
  labels:
    app: grafana
    component: config
data:
  plugins: ""
  dashboards-configmap-provisioner.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 3
        options:
          path: /etc/grafana/dashboards
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://server.prometheus.svc.cluster.local:80
  grafana.ini: |
    ; Grafana configuration here!
    instance_name = main

    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    protocol = http
    domain = grafana.${GKE_CLUSTER_NAME}.kfirs.com
    enforce_domain = true
    root_url = https://grafana.${GKE_CLUSTER_NAME}.kfirs.com
    enable_gzip = false

    [database]
    type = mysql
    host = 127.0.0.1:3306
    name = grafana
    user = grafana
    ssl_mode = disable
    max_idle_conn = 5
    max_open_conn = 10
    conn_max_lifetime = 14400
    log_queries = false

    [security]
    admin_user = admin
    login_remember_days = 14
    cookie_secure = true

    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_id = 1
    auto_assign_org_role = Viewer
    viewers_can_edit = true

    [auth]
    disable_login_form = false
    disable_signout_menu = false
    login_cookie_name = grafana_login
    login_maximum_inactive_lifetime_days = 7
    login_maximum_lifetime_days = 30
    oauth_auto_login = false
    signout_redirect_url = https://www.kfirs.com
    token_rotation_interval_minutes = 10

    [auth.anonymous]
    enabled = false

    [auth.basic]
    enabled = false

    [session]
    provider = memory
    cookie_name = grafana_session
    cookie_secure = true
    session_life_time = 86400

    [analytics]
    reporting_enabled = true
    google_analytics_ua_id = UA-77346044-1
    check_for_updates = true

    [dashboards]
    versions_to_keep = 20

    [log]
    mode = console

    [metrics]
    enabled = true

    [external_image_storage]
    provider = local

    [alerting]
    enabled = false

    [panels]
    enable_alpha = false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: grafana
  name: grafana
  labels:
    app: grafana
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: grafana
  name: mariadb
  labels:
    app: grafana
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  namespace: grafana
  name: grafana-crt
  labels:
    app: grafana
    component: ingress
spec:
  secretName: grafana-crt
  issuerRef:
    kind: ClusterIssuer
    name: cluster-issuer
  commonName: grafana.${GKE_CLUSTER_NAME}.kfirs.com
  dnsNames:
    - grafana.${GKE_CLUSTER_NAME}.kfirs.com
  acme:
    config:
      - dns01:
          provider: cloudflare
        domains:
          - grafana.${GKE_CLUSTER_NAME}.kfirs.com
---
apiVersion: v1
kind: Service
metadata:
  namespace: grafana
  name: grafana
  labels:
    app: grafana
    component: server
  annotations:
    prometheus.io/port: "3000"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: grafana
  selector:
    app: grafana
    component: server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: grafana
  name: server
  labels:
    app: grafana
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: server
  template:
    metadata:
      labels:
        app: grafana
        component: server
    spec:
      serviceAccountName: grafana
      initContainers:
        - name: init-chown-data
          image: busybox:1.30.0
          command: [chown, -R, "472:472", /var/lib/grafana]
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
      containers:
        - name: db
          image: mariadb
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key: db-root-password
                  optional: false
            - name: MYSQL_DATABASE
              value: grafana
            - name: MYSQL_USER
              value: grafana
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key: db-user-password
                  optional: false
#          livenessProbe:
#            tcpSocket:
#              port: 3306
#            failureThreshold: 3
#            initialDelaySeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            timeoutSeconds: 1
          ports:
            - name: mariadb
              containerPort: 3306
          resources:
            requests:
              cpu: 100m
              memory: 16Mi
            limits:
              cpu: 250m
              memory: 128Mi
          volumeMounts:
            - name: mariadb
              mountPath: /var/lib/mysql
              readOnly: false
        - name: server
          image: grafana/grafana:6.0.0
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: grafana
                  key: plugins
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key: db-user-password
#          livenessProbe:
#            httpGet:
#              port: service
#            failureThreshold: 3
#            initialDelaySeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            timeoutSeconds: 3
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
              readOnly: true
            - name: config
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
              readOnly: true
            - name: config
              mountPath: /etc/grafana/provisioning/dashboards/dashboards-configmap-provisioner.yaml
              subPath: dashboards-configmap-provisioner.yaml
              readOnly: true
            - name: dashboards
              mountPath: /etc/grafana/dashboards
              readOnly: true
            - name: storage
              mountPath: /var/lib/grafana
              readOnly: false
      volumes:
        - name: config
          configMap:
            name: grafana
            optional: false
        - name: dashboards
          configMap:
            name: dashboards
            optional: false
        - name: mariadb
          persistentVolumeClaim:
            claimName: mariadb
            readOnly: false
        - name: storage
          persistentVolumeClaim:
            claimName: grafana
            readOnly: false
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: grafana
  name: server
  annotations:
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
    traefik.ingress.kubernetes.io/whitelist-source-range: "${WHITELISTED_CIDR}"
  labels:
    app: grafana
    component: server
spec:
  rules:
    - host: grafana.${GKE_CLUSTER_NAME}.kfirs.com
      http:
        paths:
          - backend:
              serviceName: grafana
              servicePort: service
  tls:
    - hosts:
        - grafana.${GKE_CLUSTER_NAME}.kfirs.com
      secretName: grafana-crt
