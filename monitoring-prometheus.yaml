apiVersion: v1
kind: Namespace
metadata:
  name: prometheus
  labels:
    app: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: prometheus
  name: prometheus
  labels:
    app: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-adapter-server-resources
  labels:
    app: prometheus
rules:
  - apiGroups:
      - custom.metrics.k8s.io
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-adapter-resource-reader
  labels:
    app: prometheus
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - services
      - configmaps
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter:system:auth-delegator
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter-resource-reader
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter-resource-reader
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-adapter-hpa-controller
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-adapter-server-resources
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: prometheus
  name: adapter-auth-reader
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: prometheus
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: prometheus
  name: server
  labels:
    app: prometheus
    component: server
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: prometheus
  name: alertmanager
  labels:
    app: prometheus
    component: alertmanager
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: prometheus
  name: pushgateway
  labels:
    app: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  namespace: prometheus
  name: server
  labels:
    app: prometheus
    component: server
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app: prometheus
    component: server
---
apiVersion: v1
kind: Service
metadata:
  namespace: prometheus
  name: alertmanager
  labels:
    app: prometheus
    component: alertmanager
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9093
  selector:
    app: prometheus
    component: alertmanager
---
apiVersion: v1
kind: Service
metadata:
  namespace: prometheus
  name: adapter
  labels:
    app: prometheus
    component: adapter
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: prometheus
    component: adapter
---
apiVersion: v1
kind: Service
metadata:
  namespace: prometheus
  name: pushgateway
  labels:
    app: prometheus
    component: pushgateway
spec:
  ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
  selector:
    app: prometheus
    component: pushgateway
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  namespace: prometheus
  name: server
spec:
  secretName: server-crt
  issuerRef:
    kind: ClusterIssuer
    name: cluster-issuer
  commonName: prometheus.${ENV_NAME}.kfirs.com
  dnsNames:
    - prometheus.${ENV_NAME}.kfirs.com
  acme:
    config:
      - dns01:
          provider: cloudflare
        domains:
          - prometheus.${ENV_NAME}.kfirs.com
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  namespace: prometheus
  name: alertmanager
  labels:
    app: prometheus
    component: alertmanager
spec:
  secretName: alertmanager-crt
  issuerRef:
    kind: ClusterIssuer
    name: cluster-issuer
  commonName: alertmanager.${ENV_NAME}.kfirs.com
  dnsNames:
    - alertmanager.${ENV_NAME}.kfirs.com
  acme:
    config:
      - dns01:
          provider: cloudflare
        domains:
          - alertmanager.${ENV_NAME}.kfirs.com
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: prometheus
  name: prometheus
  labels:
    app: prometheus
  annotations:
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
    traefik.ingress.kubernetes.io/whitelist-source-range: "84.228.10.109/32,31.168.217.84/32,31.168.11.138/32,46.19.85.220/32"
spec:
  rules:
    - host: prometheus.${ENV_NAME}.kfirs.com
      http:
        paths:
          - backend:
              serviceName: server
              servicePort: http
    - host: alertmanager.${ENV_NAME}.kfirs.com
      http:
        paths:
          - backend:
              serviceName: alertmanager
              servicePort: http
  tls:
    - hosts:
        - prometheus.${ENV_NAME}.kfirs.com
      secretName: server-crt
    - hosts:
        - alertmanager.${ENV_NAME}.kfirs.com
      secretName: alertmanager-crt
---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  namespace: prometheus
  name: v1beta1.custom.metrics.k8s.io
  labels:
    app: prometheus
    component: apiservice
spec:
  service:
    namespace: prometheus
    name: adapter
  group: custom.metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prometheus
  name: server
  labels:
    app: prometheus
    component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: prometheus
        component: server
    spec:
      serviceAccountName: prometheus
      initContainers:
        - name: init-chown-data
          image: busybox:latest
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
            limits:
              cpu: 500m
              memory: 64Mi
          command: ["chown", "-R", "65534:65534", "/data"]
          volumeMounts:
            - name: storage
              mountPath: /data
      containers:
        - name: configmap-reload
          image: jimmidyson/configmap-reload:v0.2.2
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 100m
              memory: 32Mi
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
        - name: server
          image: prom/prometheus:v2.7.1
          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.retention=12h
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            - --web.enable-admin-api
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            requests:
              cpu: 500m
              memory: 500Mi
            limits:
              cpu: 1
              memory: 1Gi
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: storage
              mountPath: /data
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config
          configMap:
            name: server
            optional: false
            items:
              - key: prometheus.yml
                path: prometheus.yml
        - name: storage
          persistentVolumeClaim:
            claimName: server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prometheus
  name: adapter
  labels:
    app: prometheus
    component: adapter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: adapter
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: prometheus
        component: adapter
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccountName: prometheus
      containers:
        - name: adapter
          image: directxman12/k8s-prometheus-adapter-amd64:v0.4.1
          args:
            - /adapter
            - --secure-port=6443
            - --cert-dir=/tmp/cert
            - --logtostderr=true
            - --prometheus-url=http://server.prometheus.svc:9090
            - --metrics-relist-interval=1m
            - --v=4
            - --config=/etc/adapter/config.yaml
          ports:
            - containerPort: 6443
              name: https
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 30
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/adapter/
              readOnly: true
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: config
          configMap:
            name: adapter
            optional: false
            items:
              - key: adapter.yml
                path: config.yaml
        - name: tmp
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prometheus
  name: pushgateway
  labels:
    app: prometheus
    component: pushgateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: pushgateway
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: prometheus
        component: pushgateway
    spec:
      serviceAccountName: prometheus
      containers:
        - name: pushgateway
          image: prom/pushgateway:v0.6.0
          ports:
            - containerPort: 9091
          readinessProbe:
            httpGet:
              path: "/#/status"
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 200m
              memory: 32Mi
          volumeMounts:
            - name: storage
              mountPath: /data
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: pushgateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: prometheus
  name: alertmanager
  labels:
    app: prometheus
    component: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: alertmanager
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: prometheus
        component: alertmanager
    spec:
      serviceAccountName: prometheus
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.15.3
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data
            - --cluster.advertise-address=$(POD_IP):6783
          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: "/#/status"
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            requests:
              cpu: 50m
              memory: 16Mi
            limits:
              cpu: 100m
              memory: 32Mi
          volumeMounts:
            - name: config
              mountPath: /etc/config
            - name: storage
              mountPath: /data
        - name: configmap-reload
          image: jimmidyson/configmap-reload:v0.2.2
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 100m
              memory: 32Mi
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: alertmanager
            optional: false
            items:
              - key: alertmanager.yml
                path: alertmanager.yml
        - name: storage
          persistentVolumeClaim:
            claimName: alertmanager
---
